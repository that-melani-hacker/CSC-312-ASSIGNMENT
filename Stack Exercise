Question 1; Write a program that uses a stack to print the prime factors of a positive integer in descending order.

Question 2;	Write a function to convert a number from base 2 to base 10. To convert a number from base 2 to base 10, we first find the weight of each bit in the binary number. The weight of each bit in the binary number is assigned from right to left. The weight of the rightmost bit is 0. The weight of the bit immediately to the left of the rightmost bit is 1, the weight of the bit immediately to the left of it is 2, and so on. Consider the binary number 1001101. The weight of each bit is as follows:
weight 		6 5 4 3 2 1 0
1	0 0 1 1 0 1
We use the weight of each bit to find the equivalent decimal number. For each bit, we multiply the bit by 2 to the power of its weight, and then we add all of the numbers. For the binary number 1001101, the equivalent decimal number is
 
To write a program that converts a binary number into the equivalent decimal number, we note two things: 
-	The weight of each bit in the binary number must be known, and 
-	the weight is assigned from right to left. 
Because we do not know in advance how many bits are in the binary number, we must process the bits from right to left. After processing a bit, we can add 1 to its weight, giving the weight of the bit immediately to its left. Also, each bit must be extracted from the binary number and multiplied by 2 to the power of its weight. To extract a bit, you can use the mod operator. Write a program that uses a stack to convert a binary number into an equivalent decimal number and test your function for the following values: 11000101, 10101010, 11111111, 10000000, 1111100000.

Question 3;  Write a program that uses a stack to convert a decimal number into an equivalent binary number.

Question 4;	Write a program that converts an infix expression into an equivalent postfix expression. The rules to convert an infix expression into an equivalent postfix expression are as follows:
Suppose infx represents the infix expression and pfx represents the postfix expression. The rules to convert infx into pfx are as follows:
a.	Initialize pfx to an empty expression and also initialize the stack.
b.	Get the next symbol, sym, from infx.
b.1. If sym is an operand, append sym to pfx.
b.2. If sym is (, push sym into the stack.
b.3. If sym is ), pop and append all the symbols from the stack until the most recent left parenthesis. Pop and discard the left parenthesis.
b.4. If sym is an operator:
b.4.1. Pop and append all the operators from the stack to pfx that are above the  most recent left parenthesis and have precedence greater than or equal to sym.
b.4.2. Push sym onto the stack.
c.	After processing infx, some operators might be left in the stack. Pop and append to pfx everything from the stack.

In this program, you will consider the following (binary) arithmetic operators: +, -, *, /. You may assume that the expressions you will process are error free.

Design a class that stores the infix and postfix strings. The class must include the following operations:
•	getInfix—Stores the infix expression
•	showInfix—Outputs the infix expression
•	showPostfix—Outputs the postfix expression
Some other operations that you might need are the following:
•	convertToPostfix—Converts the infix expression into a postfix expression. The resulting postfix expression is stored in pfx.
•	precedence—Determines the precedence between two operators. If the first operator is of higher or equal precedence than the second operator, it returns the value true; otherwise, it returns the value false.

Include the constructors and destructors for automatic initialization and dynamic memory deallocation.

Test your program on the following five expressions:
A + B - C;
(A + B ) * C;
(A + B) * (C - D);
A + ((B + C) * (E - F) - G) / (H - I);
A + B * (C + D ) - E / F * G + H;

For each expression, your answer must be in the following form:
Infix Expression: A + B - C;
Postfix Expression: A B + C -
 

      Answers
1. def is_prime(n):
    """Check if a number is prime."""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_factors(n):
    """Return the prime factors of a number."""
    factors = []
    for i in range(2, n + 1):
        while n % i == 0 and is_prime(i):
            factors.append(i)
            n //= i
    return factors

def print_prime_factors_stack(n):
    """Print prime factors in descending order using a stack."""
    factors = prime_factors(n)
    stack = []

    for factor in factors:
        if not stack or stack[-1] >= factor:
            stack.append(factor)
        else:
            while stack and stack[-1] < factor:
                print(stack.pop())
            stack.append(factor)

    while stack:
        print(stack.pop())

# Example usage:
number = int(input("Enter a positive integer: "))
print(f"Prime factors of {number} in descending order:")
print_prime_factors_stack(number)
 
2. def binary_to_decimal(binary_str):
    stack = []

    for i, bit in enumerate(binary_str[::-1]):
        if bit == '1':
            stack.append(2 ** i)

    decimal_number = sum(stack)
    return decimal_number

# Test cases
binary_numbers = ["11000101", "10101010", "11111111", "10000000", "1111100000"]

for binary_num in binary_numbers:
    decimal_num = binary_to_decimal(binary_num)
    print(f"Binary: {binary_num} -> Decimal: {decimal_num}")

3. def decimal_to_binary(decimal_num):
    stack = []

    while decimal_num > 0:
        remainder = decimal_num % 2
        stack.append(str(remainder))
        decimal_num //= 2

    binary_result = ''.join(stack[::-1])
    return binary_result

# Test cases
decimal_numbers = [13, 42, 255, 128, 496]

for decimal_num in decimal_numbers:
    binary_num = decimal_to_binary(decimal_num)
    print(f"Decimal: {decimal_num} -> Binary: {binary_num}")

4.  class InfixToPostfixConverter:
    def __init__(self):
        self.infix = ""
        self.postfix = ""

    def get_infix(self, expression):
        self.infix = expression

    def show_infix(self):
        print(f"Infix Expression: {self.infix};")

    def show_postfix(self):
        print(f"Postfix Expression: {self.postfix}")

    def convert_to_postfix(self):
        stack = []
        self.postfix = ""
        operators = {'+': 1, '-': 1, '*': 2, '/': 2}

        for symbol in self.infix:
            if symbol.isalnum():
                self.postfix += symbol
            elif symbol == '(':
                stack.append(symbol)
            elif symbol == ')':
                while stack and stack[-1] != '(':
                    self.postfix += stack.pop()
                stack.pop()  # Discard the '('
            elif symbol in operators:
                while stack and stack[-1] in operators and operators[stack[-1]] >= operators[symbol]:
                    self.postfix += stack.pop()
                stack.append(symbol)

        while stack:
            self.postfix += stack.pop()

    @staticmethod
    def precedence(operator1, operator2):
        operators = {'+': 1, '-': 1, '*': 2, '/': 2}
        return operators[operator1] >= operators[operator2]

# Test the program with given expressions
expressions = [
    "A + B - C",
    "(A + B) * C",
    "(A + B) * (C - D)",
    "A + ((B + C) * (E - F) - G) / (H - I)",
    "A + B * (C + D ) - E / F * G + H"
]

for expression in expressions:
    converter = InfixToPostfixConverter()
    converter.get_infix(expression)
    converter.show_infix()
    converter.convert_to_postfix()
    converter.show_postfix()
    print()
